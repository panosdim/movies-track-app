services:
    broker:
        image: apache/kafka-native:4.0.0
        container_name: broker
        restart: unless-stopped
        user: root
        ports:
            - '9092:9092'
            - '29092:29092'
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT_DOCKER://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT_DOCKER://broker:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_DOCKER
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 1
            KAFKA_LOG_DIRS: /var/lib/kafka/data
        volumes:
            - kafka-data:/var/lib/kafka/data
        networks:
            - movies-net

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafka-ui
        depends_on:
            - broker
        ports:
            - '9080:8080'
        env_file:
            - .env
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
            KAFKA_CLUSTERS_0_METRICS_PORT: 9997
            AUTH_TYPE: 'LOGIN_FORM'
            SPRING_SECURITY_USER_NAME: ${KAFKA_UI_USERNAME}
            SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI_PASSWORD}
        restart: unless-stopped
        networks:
            - movies-net

    eureka:
        image: ghcr.io/panosdim/eureka:latest
        container_name: eureka
        restart: unless-stopped
        ports:
            - '8761:8761'
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8761/actuator/health']
            interval: 10s
            timeout: 5s
            retries: 3
        networks:
            - movies-net

    gateway:
        image: ghcr.io/panosdim/gateway:latest
        container_name: gateway
        restart: unless-stopped
        ports:
            - '8080:8080'
        depends_on:
            eureka:
                condition: service_healthy
        networks:
            - movies-net

    auth-service:
        image: ghcr.io/panosdim/auth-service:latest
        container_name: auth-service
        restart: unless-stopped
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
        networks:
            - movies-net

    movie-service:
        image: ghcr.io/panosdim/movie-service:latest
        container_name: movie-service
        restart: unless-stopped
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            broker:
                condition: service_started
        networks:
            - movies-net

    tmdb-service:
        image: ghcr.io/panosdim/tmdb-service:latest
        container_name: tmdb-service
        restart: unless-stopped
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            broker:
                condition: service_started
        networks:
            - movies-net

    notification-service:
        image: ghcr.io/panosdim/notification-service:latest
        container_name: notification-service
        restart: unless-stopped
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
        networks:
            - movies-net

    postgresql:
        image: postgres:17-alpine
        container_name: postgresql
        restart: unless-stopped
        env_file:
            - .env
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - '5432:5432'
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh:ro
        networks:
            - movies-net

    zipkin:
        image: openzipkin/zipkin:2.24
        container_name: zipkin
        restart: unless-stopped
        ports:
            - '9411:9411'
        networks:
            - movies-net

    opensearch:
        image: opensearchproject/opensearch:2.11.1
        container_name: opensearch
        restart: unless-stopped
        environment:
            - cluster.name=opensearch-cluster
            - node.name=opensearch
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - 'OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m'
            - 'DISABLE_INSTALL_DEMO_CONFIG=true'
            - 'DISABLE_SECURITY_PLUGIN=true'
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        ports:
            - '9200:9200'
            - '9600:9600'
        volumes:
            - opensearch-data:/usr/share/opensearch/data
        healthcheck:
            test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
            - movies-net

    opensearch-dashboards:
        image: opensearchproject/opensearch-dashboards:2.11.1
        container_name: opensearch-dashboards
        restart: unless-stopped
        ports:
            - '5601:5601'
        environment:
            OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
            DISABLE_SECURITY_DASHBOARDS_PLUGIN: 'true'
        depends_on:
            opensearch:
                condition: service_healthy
        networks:
            - movies-net

    fluent-bit:
        image: fluent/fluent-bit:2.2.0
        container_name: fluent-bit
        ports:
            - '24224:24224/tcp'
            - '24224:24224/udp'
        volumes:
            - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
            - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
        restart: unless-stopped
        depends_on:
            opensearch:
                condition: service_healthy
        networks:
            - movies-net

    recommendation-service:
        image: ghcr.io/panosdim/recommendation-service:latest
        container_name: recommendation-service
        hostname: recommendation-service
        ports:
            - '8005:8005'
        volumes:
            - ./models:/app/models
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            broker:
                condition: service_started
        networks:
            - movies-net
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'python', '-c', 'import requests; requests.get("http://localhost:8005/health")']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        logging:
            driver: json-file
            options:
                max-size: '10m'
                max-file: '3'

networks:
    movies-net:

volumes:
    kafka-data:
    pgdata:
    opensearch-data:
