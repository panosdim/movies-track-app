services:
    broker:
        image: apache/kafka-native:4.0.0
        container_name: broker
        ports:
            - '9092:9092'
            - '29092:29092'
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT_DOCKER://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT_DOCKER://broker:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_DOCKER
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 1
            KAFKA_LOG_DIRS: /var/lib/kafka/data
        volumes:
            - kafka-data:/var/lib/kafka/data
        networks:
            - movies-net

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafka-ui
        depends_on:
            - broker
        ports:
            - '9080:8080'
        env_file:
            - .env
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
            KAFKA_CLUSTERS_0_METRICS_PORT: 9997
            AUTH_TYPE: 'LOGIN_FORM'
            SPRING_SECURITY_USER_NAME: ${KAFKA_UI_USERNAME}
            SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI_PASSWORD}
        restart: unless-stopped
        networks:
            - movies-net

    config-server:
        image: ghcr.io/panosdim/config-server:latest
        container_name: config-server
        ports:
            - '8888:8888'
        env_file:
            - .env
        depends_on:
            - eureka
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8888/actuator/health']
            interval: 10s
            timeout: 5s
            retries: 3
        networks:
            - movies-net

    eureka:
        image: ghcr.io/panosdim/eureka:latest
        container_name: eureka
        ports:
            - '8761:8761'
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8761/actuator/health']
            interval: 10s
            timeout: 5s
            retries: 3
        networks:
            - movies-net

    gateway:
        image: ghcr.io/panosdim/gateway:latest
        container_name: gateway
        ports:
            - '8080:8080'
        depends_on:
            eureka:
                condition: service_healthy
            config-server:
                condition: service_healthy
        networks:
            - movies-net

    auth-service:
        image: ghcr.io/panosdim/auth-service:latest
        container_name: auth-service
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            config-server:
                condition: service_healthy
        networks:
            - movies-net

    movie-service:
        image: ghcr.io/panosdim/movie-service:latest
        container_name: movie-service
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            config-server:
                condition: service_healthy
            broker:
                condition: service_started
        networks:
            - movies-net

    tmdb-service:
        image: ghcr.io/panosdim/tmdb-service:latest
        container_name: tmdb-service
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            config-server:
                condition: service_healthy
            broker:
                condition: service_started
        networks:
            - movies-net

    notification-service:
        image: ghcr.io/panosdim/notification-service:latest
        container_name: notification-service
        env_file:
            - .env
        depends_on:
            eureka:
                condition: service_healthy
            config-server:
                condition: service_healthy
        networks:
            - movies-net

    postgresql:
        image: postgres:17-alpine
        container_name: postgresql
        env_file:
            - .env
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - '5432:5432'
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh:ro
        networks:
            - movies-net

    zipkin:
        image: openzipkin/zipkin:2.24
        container_name: zipkin
        ports:
            - '9411:9411'
        networks:
            - movies-net
networks:
    movies-net:

volumes:
    kafka-data:
    pgdata:
